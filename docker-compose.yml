version: "3.8"

services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD:-YourStrong!Passw0rd}
    ports:
      - "8081:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev
  
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3101:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning
    depends_on:
      - loki
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-YourStrong!Passw0rd}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki-storage:/loki

  rabbitmq:
    image: rabbitmq:3-management 
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" 
      - "15672:15672" 
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RMQ_PASSWORD:-YourStrong!Passw0rd}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
       
  db-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: db-server
    platform: ${DB_PLATFORM:-}
    environment:
      SA_PASSWORD: ${DB_PASSWORD:-YourStrong!Passw0rd}
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    networks:
      - task-network
    restart: always
    volumes:
      - taskmanager_sqlserver_data:/var/opt/mssql
  
  proxy:
    build:
      context: ./backend
      dockerfile: ./Proxy/Dockerfile
    container_name: task-manager-proxy
    ports:
      - "8080:8080"
    depends_on:
      - keycloak
      - task-service
      - user-service
    networks:
      - task-network
    restart: always

  task-service:
    build:
      context: ./backend
      dockerfile: ./Services/TaskService/Dockerfile
      target: release
    container_name: task-service
    depends_on:
      - db-server
      - rabbitmq
    environment:
      - ConnectionStrings__TaskDb=Server=db-server;Database=TaskDb;User Id=sa;Password=${DB_PASSWORD:-YourStrong!Passw0rd};TrustServerCertificate=True;
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RMQ_USER:-admin}
      - RABBITMQ_PASS=${RMQ_PASSWORD:-YourStrong!Passw0rd}
    ports:
      - "8082:8080"
    networks:
      - task-network
    restart: always

  user-service:
    build:
      context: ./backend
      dockerfile: ./Services/UserService/Dockerfile
      target: release
    container_name: user-service
    depends_on:
      - db-server
      - rabbitmq
    environment:
      - ConnectionStrings__UserDb=Server=db-server;Database=UserDB;User Id=sa;Password=${DB_PASSWORD:-YourStrong!Passw0rd};TrustServerCertificate=True;
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RMQ_USER:-admin}
      - RABBITMQ_PASS=${RMQ_PASSWORD:-YourStrong!Passw0rd}
    ports:
      - "8083:8080"
    networks:
      - task-network
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: release 
    container_name: task-frontend
    ports:
      - "3000:80"  
    depends_on:
      - proxy
    networks:
      - task-network
    restart: always

networks:
  task-network:
    driver: bridge

volumes:
  taskmanager_sqlserver_data:
  rabbitmq_data:
  keycloak_data:
  grafana-storage:
  loki-storage:
